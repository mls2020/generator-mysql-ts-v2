import { intersection } from "lodash";
import { DbLogger, RunSql } from "./dbClient";

type CreateDbUtils = {
  runSql: RunSql;
  logger: DbLogger;
};

const sqlOper = {
  EQUAL: " = ? ",
  CONTAINS: " LIKE ? ",
  GT: " > ? ",
  GTE: " >= ? ",
  LT: " < ? ",
  LTE: " <= ? ",
} as { [key: string]: string };

export type DbUtils = ReturnType<typeof createDbUtils>;

const getNamesAndValues = (element: any, fields: string[], addNullValues = false) => {
  // questa funzione ci garantisc l'ordinamento corretto tra campi e valori
  let argFields = [] as string[];
  let argValues = [] as any[];

  for (const field of fields) {
    const filterValue = element[field];
    if (filterValue !== undefined) {
      argFields.push(field);
      argValues.push(filterValue);
    } else if (addNullValues) {
      argFields.push(field);
      argValues.push(null);
    }
  }
  return {
    names: argFields,
    values: argValues,
  };
};

const getWhere = (validFields: string[], filter: any) => {
  if (validFields.length === 0) {
    return "";
  }
  let returnValue = " where ";
  returnValue += validFields
    .map((field) => {
      const operatorKey = field + "Operator";
      const operator = filter[operatorKey] ?? "EQUAL";
      return field + sqlOper[operator];
    })
    .join(" AND ");

  return returnValue;
};

export function createDbUtils({ runSql, logger }: CreateDbUtils) {
  const list =
    <T>(tableName: string, tableFields: string[]) =>
    async (filter: Partial<T>) => {
      const { names, values } = getNamesAndValues(filter, tableFields);
      logger.info({ names });
      logger.info({ values });
      const whereClause = getWhere(names, filter);
      const fieldsClause = "*"; // tableFields.length ? tableFields.map((f) => `\`${f}\``).join(",") : "*";
      const sql = `select ${fieldsClause} from \`${tableName}\` ${whereClause} `;
      return await runSql<T>(sql, values);
    };

  const get =
    <T>(tableName: string, tableFields: string[]) =>
    async (filter: Partial<T>) => {
      const ret = await list<T>(tableName, tableFields)(filter);
      return {
        ...ret,
        data: ret.data[0],
      };
    };

  const insert =
    <T>(tableName: string, tableFields: string[]) =>
    async (element: Partial<T>) => {
      const { names, values } = getNamesAndValues(element, tableFields);
      const strFields = names.map((f) => `\`${f}\``).join(",");
      const strValues = values.map(() => "?").join(",");
      const sql = `insert into \`${tableName}\` (${strFields}) values (${strValues})`;
      return await runSql<T>(sql, values);
    };

  const update =
    <T>(tableName: string, keyName: string, tableFields: string[]) =>
    async (keyValue: any, updates: Partial<T>) => {
      const filter = { [keyName]: keyValue };
      const { names, values } = getNamesAndValues(updates, tableFields);

      const strUpdNames = names.map((n) => `\`${n}\`=?`).join(",");
      const setClause = ` set ${strUpdNames} `;
      const whereClause = getWhere([keyName], filter);
      const sql = `update \`${tableName}\`  ${setClause} ${whereClause} `;
      return await runSql<T>(sql, [...values, keyValue]);
    };

  const del =
    <T>(table: string, keyname: string) =>
    async (keyValue: any) => {
      const whereClause = getWhere([keyname], { [keyname]: keyValue });
      const sql = `delete from \`${table}\` ${whereClause} `;
      return await runSql<T>(sql, [keyValue]);
    };

  const execSp =
    <A, T>(proc: string, ...argNames: string[]) =>
    async (args: A) => {
      const { names, values } = getNamesAndValues(args, argNames, true);
      const strArgsPlaceholders = names.length ? names.map(() => "?").join(",") : "";
      const sql = `call \`${proc}\` (${strArgsPlaceholders})`;
      return await runSql<T>(sql, values);
    };
  return {
    list,
    execSp,
    get,
    update,
    insert,
    delete: del,
  };
}
